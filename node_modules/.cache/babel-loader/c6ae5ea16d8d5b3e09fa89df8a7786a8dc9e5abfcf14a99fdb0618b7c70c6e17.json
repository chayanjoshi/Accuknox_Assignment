{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebDevelopment\\\\Website\\\\Interview\\\\accuknox-assignment\\\\src\\\\components\\\\TextContainer\\\\TextEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../../styles/style.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TextEditor() {\n  _s();\n  // Created an array of all the sentences\n  const sentences = [\"He's not the sharpest knife in the drawer.\", \"The big building was blazing with lights.\", \"Now you must answer some big questions.\", \"Get Your Act Together!\"];\n\n  // Here I created a new array of the same length as of the sentences array and in this array i will store all the properties that will update our sentence for that particular index.\n  const [styles, setStyles] = useState(Array(sentences.length).fill({\n    fontWeight: \"normal\",\n    fontStyle: \"normal\",\n    textDecoration: \"none\",\n    fontSize: 16,\n    color: \"#000000\"\n  }));\n  const handleStyleToggle = (index, property) => {\n    setStyles(prevStyles => {\n      const updatedStyles = [...prevStyles];\n      switch (property) {\n        case \"fontWeight\":\n          updatedStyles[index] = {\n            ...updatedStyles[index],\n            fontWeight: updatedStyles[index].fontWeight === \"normal\" ? \"bold\" : \"normal\"\n          };\n          break;\n        case \"fontStyle\":\n          updatedStyles[index] = {\n            ...updatedStyles[index],\n            fontStyle: updatedStyles[index].fontStyle === \"normal\" ? \"italic\" : \"normal\"\n          };\n          break;\n        case \"textDecoration\":\n          updatedStyles[index] = {\n            ...updatedStyles[index],\n            textDecoration: updatedStyles[index].textDecoration === \"none\" ? \"underline\" : \"none\"\n          };\n          break;\n        default:\n          break;\n      }\n      return updatedStyles;\n    });\n  };\n  const handleFontSizeChange = (index, e) => {\n    setStyles(prevStyles => {\n      // here i am creating a copy of the previous styles to have an idea from what state it changed.\n      const updatedStyles = [...prevStyles];\n      updatedStyles[index] = {\n        ...updatedStyles[index],\n        fontSize: parseInt(e.target.value)\n      };\n      return updatedStyles;\n    });\n  };\n  const handleColorChange = (index, e) => {\n    setStyles(prevStyles => {\n      const updatedStyles = [...prevStyles];\n      updatedStyles[index] = {\n        ...updatedStyles[index],\n        color: e.target.value\n      };\n      return updatedStyles;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: styles.map((style, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-editor\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleStyleToggle(index, \"fontWeight\"),\n            children: \"Bold\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleStyleToggle(index, \"fontStyle\"),\n            children: \"Italic\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleStyleToggle(index, \"textDecoration\"),\n            children: \"Underline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `fontSizeInput-${index}`,\n            children: \"Font Size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: `fontSizeInput-${index}`,\n            type: \"number\",\n            min: 1,\n            value: style.fontSize,\n            onChange: e => handleFontSizeChange(index, e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `colorInput-${index}`,\n            children: \"Color:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: `colorInput-${index}`,\n            type: \"color\",\n            value: style.color,\n            onChange: e => handleColorChange(index, e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-box\",\n        style: style,\n        children: sentences[index]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(TextEditor, \"0/BsRY/X9opnxWvr3qCyw8JjRmM=\");\n_c = TextEditor;\nexport default TextEditor;\nvar _c;\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TextEditor","_s","sentences","styles","setStyles","Array","length","fill","fontWeight","fontStyle","textDecoration","fontSize","color","handleStyleToggle","index","property","prevStyles","updatedStyles","handleFontSizeChange","e","parseInt","target","value","handleColorChange","className","children","map","style","onClick","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","type","min","onChange","_c","$RefreshReg$"],"sources":["D:/WebDevelopment/Website/Interview/accuknox-assignment/src/components/TextContainer/TextEditor.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../../styles/style.css\";\r\n\r\nfunction TextEditor() {\r\n  // Created an array of all the sentences\r\n  const sentences = [\r\n    \"He's not the sharpest knife in the drawer.\",\r\n    \"The big building was blazing with lights.\",\r\n    \"Now you must answer some big questions.\",\r\n    \"Get Your Act Together!\",\r\n  ];\r\n\r\n  // Here I created a new array of the same length as of the sentences array and in this array i will store all the properties that will update our sentence for that particular index.\r\n  const [styles, setStyles] = useState(\r\n    Array(sentences.length).fill({\r\n      fontWeight: \"normal\",\r\n      fontStyle: \"normal\",\r\n      textDecoration: \"none\",\r\n      fontSize: 16,\r\n      color: \"#000000\",\r\n    })\r\n  );\r\n\r\n  const handleStyleToggle = (index, property) => {\r\n    setStyles((prevStyles) => {\r\n      const updatedStyles = [...prevStyles];\r\n      switch (property) {\r\n        case \"fontWeight\":\r\n          updatedStyles[index] = {\r\n            ...updatedStyles[index],\r\n            fontWeight:\r\n              updatedStyles[index].fontWeight === \"normal\" ? \"bold\" : \"normal\",\r\n          };\r\n          break;\r\n        case \"fontStyle\":\r\n          updatedStyles[index] = {\r\n            ...updatedStyles[index],\r\n            fontStyle:\r\n              updatedStyles[index].fontStyle === \"normal\" ? \"italic\" : \"normal\",\r\n          };\r\n          break;\r\n        case \"textDecoration\":\r\n          updatedStyles[index] = {\r\n            ...updatedStyles[index],\r\n            textDecoration:\r\n              updatedStyles[index].textDecoration === \"none\"\r\n                ? \"underline\"\r\n                : \"none\",\r\n          };\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      return updatedStyles;\r\n    });\r\n  };\r\n\r\n  const handleFontSizeChange = (index, e) => {\r\n    setStyles((prevStyles) => {\r\n      // here i am creating a copy of the previous styles to have an idea from what state it changed.\r\n      const updatedStyles = [...prevStyles];\r\n      updatedStyles[index] = {\r\n        ...updatedStyles[index],\r\n        fontSize: parseInt(e.target.value),\r\n      };\r\n      return updatedStyles;\r\n    });\r\n  };\r\n\r\n  const handleColorChange = (index, e) => {\r\n    setStyles((prevStyles) => {\r\n      const updatedStyles = [...prevStyles];\r\n      updatedStyles[index] = { ...updatedStyles[index], color: e.target.value };\r\n      return updatedStyles;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      {styles.map((style, index) => (\r\n        <>\r\n          <div key={index} className=\"grid-row\">\r\n            <div className=\"text-editor\">\r\n              <button onClick={() => handleStyleToggle(index, \"fontWeight\")}>\r\n                Bold\r\n              </button>\r\n              <button onClick={() => handleStyleToggle(index, \"fontStyle\")}>\r\n                Italic\r\n              </button>\r\n              <button\r\n                onClick={() => handleStyleToggle(index, \"textDecoration\")}\r\n              >\r\n                Underline\r\n              </button>\r\n              <label htmlFor={`fontSizeInput-${index}`}>Font Size:</label>\r\n              <input\r\n                id={`fontSizeInput-${index}`}\r\n                type=\"number\"\r\n                min={1}\r\n                value={style.fontSize}\r\n                onChange={(e) => handleFontSizeChange(index, e)}\r\n              />\r\n              <label htmlFor={`colorInput-${index}`}>Color:</label>\r\n              <input\r\n                id={`colorInput-${index}`}\r\n                type=\"color\"\r\n                value={style.color}\r\n                onChange={(e) => handleColorChange(index, e)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"text-box\" style={style}>\r\n            {sentences[index]}\r\n          </div>\r\n        </>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextEditor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}